generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OAuthProvider {
  google
}

enum StorageItemType  {
  folder
  document
}

enum WorkspaceMemberRole {
  admin
  member
  viewer
}

model Account {
  userId    String
  provider  OAuthProvider
  providerAccountId String
  accessToken String
  refreshToken String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@id([provider, providerAccountId])
}


model User {
    id        String   @id @default(cuid())
    email     String   @unique
    name      String 
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    workspaces WorkspaceMember[]
    accounts  Account[]
}


model Workspace {
    id          String   @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    members     WorkspaceMember[]
    storageItems StorageItem[]
}

model StorageItem {
  id         String   @id @default(cuid())
  workspace  Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  parentItemId String?
  parent        StorageItem? @relation("StorageItem", fields: [parentItemId], references: [id])
  children     StorageItem[] @relation("StorageItem")
  name      String
  type      StorageItemType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model WorkspaceMember {
  userId    String
  workspaceId String
  role      WorkspaceMemberRole @default(viewer)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@id([userId, workspaceId])
}